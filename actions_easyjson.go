// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package hyperliquid

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid(in *jlexer.Lexer, out *orderWireTypeTrigger) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "triggerPx":
			out.TriggerPx = float64(in.Float64Str())
		case "isMarket":
			out.IsMarket = bool(in.Bool())
		case "tpsl":
			out.Tpsl = Tpsl(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid(out *jwriter.Writer, in orderWireTypeTrigger) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"triggerPx\":"
		out.RawString(prefix[1:])
		out.Float64Str(float64(in.TriggerPx))
	}
	{
		const prefix string = ",\"isMarket\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMarket))
	}
	{
		const prefix string = ",\"tpsl\":"
		out.RawString(prefix)
		out.String(string(in.Tpsl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v orderWireTypeTrigger) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v orderWireTypeTrigger) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *orderWireTypeTrigger) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *orderWireTypeTrigger) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid1(in *jlexer.Lexer, out *orderWireTypeLimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tif":
			out.Tif = Tif(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid1(out *jwriter.Writer, in orderWireTypeLimit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tif\":"
		out.RawString(prefix[1:])
		out.String(string(in.Tif))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v orderWireTypeLimit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v orderWireTypeLimit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *orderWireTypeLimit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *orderWireTypeLimit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid1(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid2(in *jlexer.Lexer, out *orderWireType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(orderWireTypeLimit)
				}
				(*out.Limit).UnmarshalEasyJSON(in)
			}
		case "trigger":
			if in.IsNull() {
				in.Skip()
				out.Trigger = nil
			} else {
				if out.Trigger == nil {
					out.Trigger = new(orderWireTypeTrigger)
				}
				(*out.Trigger).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid2(out *jwriter.Writer, in orderWireType) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Limit).MarshalEasyJSON(out)
	}
	if in.Trigger != nil {
		const prefix string = ",\"trigger\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Trigger).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v orderWireType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v orderWireType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *orderWireType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *orderWireType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid2(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid3(in *jlexer.Lexer, out *WithdrawFromBridgeAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "amount":
			out.Amount = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid3(out *jwriter.Writer, in WithdrawFromBridgeAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"destination\":"
		out.RawString(prefix)
		out.String(string(in.Destination))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawFromBridgeAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawFromBridgeAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawFromBridgeAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawFromBridgeAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid3(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid4(in *jlexer.Lexer, out *VaultUsdTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "vaultAddress":
			out.VaultAddress = string(in.String())
		case "isDeposit":
			out.IsDeposit = bool(in.Bool())
		case "usd":
			out.Usd = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid4(out *jwriter.Writer, in VaultUsdTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"vaultAddress\":"
		out.RawString(prefix)
		out.String(string(in.VaultAddress))
	}
	{
		const prefix string = ",\"isDeposit\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDeposit))
	}
	{
		const prefix string = ",\"usd\":"
		out.RawString(prefix)
		out.Int(int(in.Usd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VaultUsdTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VaultUsdTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VaultUsdTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VaultUsdTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid4(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid5(in *jlexer.Lexer, out *VaultModifyAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "vaultAddress":
			out.VaultAddress = string(in.String())
		case "allowDeposits":
			out.AllowDeposits = bool(in.Bool())
		case "alwaysCloseOnWithdraw":
			out.AlwaysCloseOnWithdraw = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid5(out *jwriter.Writer, in VaultModifyAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"vaultAddress\":"
		out.RawString(prefix)
		out.String(string(in.VaultAddress))
	}
	{
		const prefix string = ",\"allowDeposits\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowDeposits))
	}
	{
		const prefix string = ",\"alwaysCloseOnWithdraw\":"
		out.RawString(prefix)
		out.Bool(bool(in.AlwaysCloseOnWithdraw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VaultModifyAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VaultModifyAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VaultModifyAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VaultModifyAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid5(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid6(in *jlexer.Lexer, out *VaultDistributeAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "vaultAddress":
			out.VaultAddress = string(in.String())
		case "usd":
			out.Usd = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid6(out *jwriter.Writer, in VaultDistributeAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"vaultAddress\":"
		out.RawString(prefix)
		out.String(string(in.VaultAddress))
	}
	{
		const prefix string = ",\"usd\":"
		out.RawString(prefix)
		out.Int(int(in.Usd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VaultDistributeAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VaultDistributeAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VaultDistributeAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VaultDistributeAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid6(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid7(in *jlexer.Lexer, out *UseBigBlocksAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "usingBigBlocks":
			out.UsingBigBlocks = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid7(out *jwriter.Writer, in UseBigBlocksAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"usingBigBlocks\":"
		out.RawString(prefix)
		out.Bool(bool(in.UsingBigBlocks))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UseBigBlocksAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UseBigBlocksAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UseBigBlocksAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UseBigBlocksAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid7(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid8(in *jlexer.Lexer, out *UsdTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "amount":
			out.Amount = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid8(out *jwriter.Writer, in UsdTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"destination\":"
		out.RawString(prefix)
		out.String(string(in.Destination))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsdTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsdTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsdTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsdTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid8(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid9(in *jlexer.Lexer, out *UsdClassTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "amount":
			out.Amount = string(in.String())
		case "toPerp":
			out.ToPerp = bool(in.Bool())
		case "nonce":
			out.Nonce = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid9(out *jwriter.Writer, in UsdClassTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"toPerp\":"
		out.RawString(prefix)
		out.Bool(bool(in.ToPerp))
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Int64(int64(in.Nonce))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsdClassTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsdClassTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsdClassTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsdClassTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid9(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid10(in *jlexer.Lexer, out *UpdateLeverageAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "asset":
			out.Asset = int(in.Int())
		case "leverage":
			out.Leverage = int(in.Int())
		case "isCross":
			out.IsCross = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid10(out *jwriter.Writer, in UpdateLeverageAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"asset\":"
		out.RawString(prefix)
		out.Int(int(in.Asset))
	}
	{
		const prefix string = ",\"leverage\":"
		out.RawString(prefix)
		out.Int(int(in.Leverage))
	}
	{
		const prefix string = ",\"isCross\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCross))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateLeverageAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateLeverageAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateLeverageAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateLeverageAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid10(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid11(in *jlexer.Lexer, out *UpdateIsolatedMarginAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "asset":
			out.Asset = int(in.Int())
		case "isBuy":
			out.IsBuy = bool(in.Bool())
		case "ntli":
			out.Ntli = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid11(out *jwriter.Writer, in UpdateIsolatedMarginAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"asset\":"
		out.RawString(prefix)
		out.Int(int(in.Asset))
	}
	{
		const prefix string = ",\"isBuy\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBuy))
	}
	{
		const prefix string = ",\"ntli\":"
		out.RawString(prefix)
		out.Float64(float64(in.Ntli))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateIsolatedMarginAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateIsolatedMarginAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateIsolatedMarginAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateIsolatedMarginAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid11(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid12(in *jlexer.Lexer, out *TokenDelegateAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "validator":
			out.Validator = string(in.String())
		case "wei":
			out.Wei = int(in.Int())
		case "isUndelegate":
			out.IsUndelegate = bool(in.Bool())
		case "nonce":
			out.Nonce = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid12(out *jwriter.Writer, in TokenDelegateAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix)
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"wei\":"
		out.RawString(prefix)
		out.Int(int(in.Wei))
	}
	{
		const prefix string = ",\"isUndelegate\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsUndelegate))
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Int64(int64(in.Nonce))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TokenDelegateAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TokenDelegateAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TokenDelegateAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TokenDelegateAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid12(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid13(in *jlexer.Lexer, out *SubAccountTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "subAccountUser":
			out.SubAccountUser = string(in.String())
		case "isDeposit":
			out.IsDeposit = bool(in.Bool())
		case "usd":
			out.Usd = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid13(out *jwriter.Writer, in SubAccountTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"subAccountUser\":"
		out.RawString(prefix)
		out.String(string(in.SubAccountUser))
	}
	{
		const prefix string = ",\"isDeposit\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDeposit))
	}
	{
		const prefix string = ",\"usd\":"
		out.RawString(prefix)
		out.Int(int(in.Usd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubAccountTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubAccountTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubAccountTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubAccountTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid13(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid14(in *jlexer.Lexer, out *SubAccountSpotTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "subAccountUser":
			out.SubAccountUser = string(in.String())
		case "isDeposit":
			out.IsDeposit = bool(in.Bool())
		case "token":
			out.Token = string(in.String())
		case "amount":
			out.Amount = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid14(out *jwriter.Writer, in SubAccountSpotTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"subAccountUser\":"
		out.RawString(prefix)
		out.String(string(in.SubAccountUser))
	}
	{
		const prefix string = ",\"isDeposit\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDeposit))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Float64(float64(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubAccountSpotTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubAccountSpotTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubAccountSpotTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubAccountSpotTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid14(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid15(in *jlexer.Lexer, out *SpotTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "amount":
			out.Amount = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid15(out *jwriter.Writer, in SpotTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"destination\":"
		out.RawString(prefix)
		out.String(string(in.Destination))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid15(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid16(in *jlexer.Lexer, out *SetReferrerAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid16(out *jwriter.Writer, in SetReferrerAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetReferrerAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetReferrerAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetReferrerAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetReferrerAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid16(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid17(in *jlexer.Lexer, out *ScheduleCancelAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "time":
			if in.IsNull() {
				in.Skip()
				out.Time = nil
			} else {
				if out.Time == nil {
					out.Time = new(int64)
				}
				*out.Time = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid17(out *jwriter.Writer, in ScheduleCancelAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Time != nil {
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(*in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScheduleCancelAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScheduleCancelAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScheduleCancelAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScheduleCancelAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid17(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid18(in *jlexer.Lexer, out *PerpDexClassTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "dex":
			out.Dex = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "amount":
			out.Amount = float64(in.Float64())
		case "toPerp":
			out.ToPerp = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid18(out *jwriter.Writer, in PerpDexClassTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"dex\":"
		out.RawString(prefix)
		out.String(string(in.Dex))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Float64(float64(in.Amount))
	}
	{
		const prefix string = ",\"toPerp\":"
		out.RawString(prefix)
		out.Bool(bool(in.ToPerp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PerpDexClassTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PerpDexClassTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PerpDexClassTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PerpDexClassTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid18(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid19(in *jlexer.Lexer, out *OrderWire) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a":
			out.Asset = int(in.Int())
		case "b":
			out.IsBuy = bool(in.Bool())
		case "p":
			out.LimitPx = string(in.String())
		case "s":
			out.Size = string(in.String())
		case "r":
			out.ReduceOnly = bool(in.Bool())
		case "t":
			(out.OrderType).UnmarshalEasyJSON(in)
		case "c":
			if in.IsNull() {
				in.Skip()
				out.Cloid = nil
			} else {
				if out.Cloid == nil {
					out.Cloid = new(string)
				}
				*out.Cloid = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid19(out *jwriter.Writer, in OrderWire) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Asset))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBuy))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.LimitPx))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Size))
	}
	{
		const prefix string = ",\"r\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReduceOnly))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		(in.OrderType).MarshalEasyJSON(out)
	}
	if in.Cloid != nil {
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(*in.Cloid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderWire) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderWire) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderWire) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderWire) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid19(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid20(in *jlexer.Lexer, out *OrderAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "orders":
			if in.IsNull() {
				in.Skip()
				out.Orders = nil
			} else {
				in.Delim('[')
				if out.Orders == nil {
					if !in.IsDelim(']') {
						out.Orders = make([]OrderWire, 0, 0)
					} else {
						out.Orders = []OrderWire{}
					}
				} else {
					out.Orders = (out.Orders)[:0]
				}
				for !in.IsDelim(']') {
					var v1 OrderWire
					(v1).UnmarshalEasyJSON(in)
					out.Orders = append(out.Orders, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "grouping":
			out.Grouping = string(in.String())
		case "builder":
			if in.IsNull() {
				in.Skip()
				out.Builder = nil
			} else {
				if out.Builder == nil {
					out.Builder = new(BuilderInfo)
				}
				(*out.Builder).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid20(out *jwriter.Writer, in OrderAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"orders\":"
		out.RawString(prefix)
		if in.Orders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Orders {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"grouping\":"
		out.RawString(prefix)
		out.String(string(in.Grouping))
	}
	if in.Builder != nil {
		const prefix string = ",\"builder\":"
		out.RawString(prefix)
		(*in.Builder).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid20(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid21(in *jlexer.Lexer, out *MultiSigAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "action":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Action = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.Action)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "signers":
			if in.IsNull() {
				in.Skip()
				out.Signers = nil
			} else {
				in.Delim('[')
				if out.Signers == nil {
					if !in.IsDelim(']') {
						out.Signers = make([]string, 0, 4)
					} else {
						out.Signers = []string{}
					}
				} else {
					out.Signers = (out.Signers)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Signers = append(out.Signers, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "signatures":
			if in.IsNull() {
				in.Skip()
				out.Signatures = nil
			} else {
				in.Delim('[')
				if out.Signatures == nil {
					if !in.IsDelim(']') {
						out.Signatures = make([]string, 0, 4)
					} else {
						out.Signatures = []string{}
					}
				} else {
					out.Signatures = (out.Signatures)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Signatures = append(out.Signatures, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid21(out *jwriter.Writer, in MultiSigAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		if in.Action == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Action {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				if m, ok := v7Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v7Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v7Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"signers\":"
		out.RawString(prefix)
		if in.Signers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Signers {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"signatures\":"
		out.RawString(prefix)
		if in.Signatures == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Signatures {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultiSigAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultiSigAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultiSigAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultiSigAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid21(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid22(in *jlexer.Lexer, out *ModifyAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "oid":
			if m, ok := out.Oid.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Oid.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Oid = in.Interface()
			}
		case "order":
			(out.Order).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid22(out *jwriter.Writer, in ModifyAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"oid\":"
		out.RawString(prefix)
		if m, ok := in.Oid.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Oid.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Oid))
		}
	}
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix)
		(in.Order).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ModifyAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ModifyAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ModifyAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ModifyAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid22(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid23(in *jlexer.Lexer, out *CreateVaultAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "initialUsd":
			out.InitialUsd = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid23(out *jwriter.Writer, in CreateVaultAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"initialUsd\":"
		out.RawString(prefix)
		out.Int(int(in.InitialUsd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateVaultAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateVaultAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateVaultAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateVaultAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid23(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid24(in *jlexer.Lexer, out *CreateSubAccountAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid24(out *jwriter.Writer, in CreateSubAccountAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateSubAccountAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateSubAccountAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateSubAccountAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateSubAccountAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid24(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid25(in *jlexer.Lexer, out *ConvertToMultiSigUserAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "signers":
			out.Signers = string(in.String())
		case "nonce":
			out.Nonce = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid25(out *jwriter.Writer, in ConvertToMultiSigUserAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"signers\":"
		out.RawString(prefix)
		out.String(string(in.Signers))
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Int64(int64(in.Nonce))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConvertToMultiSigUserAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConvertToMultiSigUserAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConvertToMultiSigUserAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConvertToMultiSigUserAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid25(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid26(in *jlexer.Lexer, out *CancelOrderWire) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a":
			out.Asset = int(in.Int())
		case "o":
			out.OrderID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid26(out *jwriter.Writer, in CancelOrderWire) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Asset))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelOrderWire) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelOrderWire) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelOrderWire) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelOrderWire) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid26(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid27(in *jlexer.Lexer, out *CancelByCloidWire) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "asset":
			out.Asset = int(in.Int())
		case "cloid":
			out.ClientID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid27(out *jwriter.Writer, in CancelByCloidWire) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"asset\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Asset))
	}
	{
		const prefix string = ",\"cloid\":"
		out.RawString(prefix)
		out.String(string(in.ClientID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelByCloidWire) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelByCloidWire) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelByCloidWire) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelByCloidWire) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid27(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid28(in *jlexer.Lexer, out *CancelByCloidAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "cancels":
			if in.IsNull() {
				in.Skip()
				out.Cancels = nil
			} else {
				in.Delim('[')
				if out.Cancels == nil {
					if !in.IsDelim(']') {
						out.Cancels = make([]CancelByCloidWire, 0, 2)
					} else {
						out.Cancels = []CancelByCloidWire{}
					}
				} else {
					out.Cancels = (out.Cancels)[:0]
				}
				for !in.IsDelim(']') {
					var v12 CancelByCloidWire
					(v12).UnmarshalEasyJSON(in)
					out.Cancels = append(out.Cancels, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid28(out *jwriter.Writer, in CancelByCloidAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"cancels\":"
		out.RawString(prefix)
		if in.Cancels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Cancels {
				if v13 > 0 {
					out.RawByte(',')
				}
				(v14).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelByCloidAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelByCloidAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelByCloidAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelByCloidAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid28(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid29(in *jlexer.Lexer, out *CancelAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "cancels":
			if in.IsNull() {
				in.Skip()
				out.Cancels = nil
			} else {
				in.Delim('[')
				if out.Cancels == nil {
					if !in.IsDelim(']') {
						out.Cancels = make([]CancelOrderWire, 0, 4)
					} else {
						out.Cancels = []CancelOrderWire{}
					}
				} else {
					out.Cancels = (out.Cancels)[:0]
				}
				for !in.IsDelim(']') {
					var v15 CancelOrderWire
					(v15).UnmarshalEasyJSON(in)
					out.Cancels = append(out.Cancels, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid29(out *jwriter.Writer, in CancelAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"cancels\":"
		out.RawString(prefix)
		if in.Cancels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Cancels {
				if v16 > 0 {
					out.RawByte(',')
				}
				(v17).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid29(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid30(in *jlexer.Lexer, out *BatchModifyAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "modifies":
			if in.IsNull() {
				in.Skip()
				out.Modifies = nil
			} else {
				in.Delim('[')
				if out.Modifies == nil {
					if !in.IsDelim(']') {
						out.Modifies = make([]ModifyAction, 0, 0)
					} else {
						out.Modifies = []ModifyAction{}
					}
				} else {
					out.Modifies = (out.Modifies)[:0]
				}
				for !in.IsDelim(']') {
					var v18 ModifyAction
					(v18).UnmarshalEasyJSON(in)
					out.Modifies = append(out.Modifies, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid30(out *jwriter.Writer, in BatchModifyAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"modifies\":"
		out.RawString(prefix)
		if in.Modifies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Modifies {
				if v19 > 0 {
					out.RawByte(',')
				}
				(v20).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchModifyAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchModifyAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchModifyAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchModifyAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid30(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid31(in *jlexer.Lexer, out *ApproveBuilderFeeAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "builder":
			out.Builder = string(in.String())
		case "maxFeeRate":
			out.MaxFeeRate = string(in.String())
		case "nonce":
			out.Nonce = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid31(out *jwriter.Writer, in ApproveBuilderFeeAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"builder\":"
		out.RawString(prefix)
		out.String(string(in.Builder))
	}
	{
		const prefix string = ",\"maxFeeRate\":"
		out.RawString(prefix)
		out.String(string(in.MaxFeeRate))
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Int64(int64(in.Nonce))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApproveBuilderFeeAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApproveBuilderFeeAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApproveBuilderFeeAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApproveBuilderFeeAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid31(l, v)
}
func easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid32(in *jlexer.Lexer, out *ApproveAgentAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "agentAddress":
			out.AgentAddress = string(in.String())
		case "agentName":
			if in.IsNull() {
				in.Skip()
				out.AgentName = nil
			} else {
				if out.AgentName == nil {
					out.AgentName = new(string)
				}
				*out.AgentName = string(in.String())
			}
		case "nonce":
			out.Nonce = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid32(out *jwriter.Writer, in ApproveAgentAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"agentAddress\":"
		out.RawString(prefix)
		out.String(string(in.AgentAddress))
	}
	if in.AgentName != nil {
		const prefix string = ",\"agentName\":"
		out.RawString(prefix)
		out.String(string(*in.AgentName))
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Int64(int64(in.Nonce))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApproveAgentAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApproveAgentAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComIvanzh94GoHyperliquid32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApproveAgentAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApproveAgentAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComIvanzh94GoHyperliquid32(l, v)
}
